<?php

namespace ModulesGarden\Servers\AwsEc2\App\Http\Actions;

use ModulesGarden\Servers\AwsEc2\App\Helpers\CustomFields\ProductCustomFields;
use ModulesGarden\Servers\AwsEc2\App\Helpers\EmailSender;
use ModulesGarden\Servers\AwsEc2\App\Helpers\ProvisioningConstants;
use ModulesGarden\Servers\AwsEc2\App\Helpers\SSHKey;
use ModulesGarden\Servers\AwsEc2\App\Helpers\UserData;
use ModulesGarden\Servers\AwsEc2\App\Libs\AwsIntegration\ClientWrapper;
use ModulesGarden\Servers\AwsEc2\Core\App\Controllers\Instances\AddonController;
use ModulesGarden\Servers\AwsEc2\Core\Http\View\Smarty;
use function ModulesGarden\Servers\AwsEc2\Core\Helper\queue;
use ModulesGarden\Servers\AwsEc2\Core\Models\ProductSettings\Repository;
use function ModulesGarden\Servers\AwsEc2\Core\Helper\sl;


/**
 * Class CreateAccount
 *
 * @author <slawomir@modulesgarden.com>
 */
class CreateAccount extends AddonController
{
    /**
     * WHCMS product id
     * @var null|int
     */
    protected $pid = null;

    /**
     * WHCMS service id
     * @var null|int
     */
    protected $sid = null;

    protected $productSettings = [];

    protected $params = [];
    /** @var ClientWrapper */
    protected $apiConnection = null;

    public function execute($params = null)
    {


        try {
            $serviceId =  $params['serviceid'];

            $haystack = $params['customfields']['aminame'];
           
            
            if (strpos(strtolower($haystack), "centos") !== false) {
               $nusername = 'centos';
            } elseif (strpos(strtolower($haystack), "debian") !== false) {
                $nusername = 'admin';
            } elseif (strpos(strtolower($haystack), "fedora") !== false) {
                $nusername = 'fedora';
            } elseif (strpos(strtolower($haystack), "ubuntu") !== false) {
                $nusername = 'ubuntu ';
            } elseif (strpos(strtolower($haystack), "freebsd") !== false) {
                $nusername = 'ec2-user';
            } elseif (strpos(strtolower($haystack), "rocky") !== false) {
                $nusername = 'rocky';
            } elseif (strpos(strtolower($haystack), "windows") !== false || strpos($haystack, "windows") !== false) {
                $nusername = 'Administrator';
            } 

            mysql_query("UPDATE tblhosting SET `username` = '$nusername' where id='$serviceId'");
            
            $this->loadProductConfig($params);

            $this->loadApiConnection();
            $key = $this->importKey($params);
            $serviceId =  $params['serviceid'];

           
            try {
                if($this->productSettings['firewall'] == 'on') {
                    $suffix = uniqid();
                    $secGroupParams = [
                        'GroupName' => $params['domain'] ? $params['domain'] . '_' . $params['serviceid'] . '_' . $suffix : 'sg_' . $params['serviceid'] . '_' . $suffix,
                        'Description' => 'Automatically generated by WHMCS during instance creation.'
                    ];

                    $securityGroup = $this->apiConnection->createSecurityGroup($secGroupParams);
                    $securityGroupId = $securityGroup->get('GroupId');
                }

                $requestParams = $this->prepareRequestParams($params, $key);
                $requestParams = $this->swapSecurityGroup($requestParams, $securityGroupId);

                // $requestParams['DryRun']=true;
                $result = $this->apiConnection->runInstances($requestParams);

            } catch (\Exception $exc) {
                $this->deleteKey('WHMCS_SERVICE_' . $params['serviceid']);
                throw $exc;
            }

            $instances = $result->get('Instances');
            $instance = $instances[0];


            $this->updateCustomField(ProvisioningConstants::INSTANCE_ID, $instance['InstanceId']);
            $this->updateCustomField(ProvisioningConstants::INSTANCE_TAGS, $this->parseTags($instance['Tags']));

            $this->runInstanceCreatedEvent($instance,$securityGroupId);

            $this->tagNetworkInterfaces($instances[0]);
            // $mailresponse=$this->sendWelcomeEmail($params['serviceid'], $params, $instance);
            // logModuleCall("AWSEC2","Create",$mailresponse,$instance);
        //     while ($action->status == 'running') {
        //     usleep($pollingInterval * 1000000);
        //     $action = $action->refresh();
        // }
            return 'success';
        } catch (\Aws\Exception\AwsException $exc) {
            if(strpos($exc->getAwsErrorCode(), 'InvalidGroupId') !== false && $securityGroupId != null) {
                $this->apiConnection->deleteSecurityGroup(['GroupId' => $securityGroupId]);
                $this->deleteKey('WHMCS_SERVICE_' . $params['serviceid']);
            }
            if(strpos($exc->getMessage(), 'Invalid id') !== false){
                return sl('lang')->T('invalidId');
            }
            return $exc->getAwsErrorMessage();
        } catch (\Exception $exc) {
            return $exc->getMessage();
        }
    }

    protected function tagNetworkInterfaces($instanceDetails = null)
    {
        if (!$instanceDetails) {
            return;
        }

        $networkInterfacesIds = [];
        foreach ($instanceDetails['NetworkInterfaces'] as $interface) {
            if (is_string($interface['NetworkInterfaceId']) && trim($interface['NetworkInterfaceId']) !== '') {
                $networkInterfacesIds[] = $interface['NetworkInterfaceId'];
            }
        }

        if (!empty($networkInterfacesIds)) {
            $this->apiConnection->createTags([
                'Resources' => $networkInterfacesIds,
                'Tags' => $this->getTagsParams()
            ]);
        }
    }

    protected function runInstanceCreatedEvent($instanceDetails = null,$securityGroupId=null)
    {

        /*Add inbound ssh firewall rule*/
        $ipPermissions=[
            'GroupId' => $securityGroupId,
            'IpPermissions' => [
               [
                'FromPort' => 22,
                'ToPort' => 22,
                'IpProtocol' => TCP,
                'IpRanges' => [
                    [
                        'CidrIp' => '0.0.0.0/0'
                    ]
                    ],
                ],
                [
                    'FromPort' => 3389,
                    'ToPort' => 3389,
                    'IpProtocol' => TCP,
                    'IpRanges' => [
                        [
                            'CidrIp' => '0.0.0.0/0'
                        ]
                        ],
                    ]
            ]
        ];
        try
        {

            $this->apiConnection->authorizeSecurityGroupInboundRule($ipPermissions);
        }
        catch (AwsException $e)
        {
            logActivity($e->getAwsErrorMessage());
        }

        if ($this->productSettings['getWindowsPassword'] === 'on') {
            queue(
                \ModulesGarden\Servers\AwsEc2\App\Jobs\GetWindowsPassword::class,
                [
                    'pid' => $this->pid,
                    'sid' => $this->sid,
                    'instanceId' => $instanceDetails['InstanceId']
                ],
                null,
                'Hosting',
                $this->sid,
                $instanceDetails['InstanceId']
            );
        }

        $ipCount = ($this->isProperIpCount($this->params['configoptions']['ipv4']) ?
            (int)$this->params['configoptions']['ipv4'] : (int)$this->productSettings['ipv4']);
        queue(
            \ModulesGarden\Servers\AwsEc2\App\Jobs\VmCreated::class,
            [
                'pid' => $this->pid,
                'sid' => $this->sid,
                'instanceId' => $instanceDetails['InstanceId'],
                'ipv4Count' => $ipCount,
                'tagParams' => $this->getTagsParams(),
                'securityGroupIds' => (is_array($this->productSettings['securityGroups']) ? $this->productSettings['securityGroups'] : null)
            ],
            null,
            'Hosting',
            $this->sid,
            $instanceDetails['InstanceId']
        );
    }

    public function importKey($params)
    {
        $key = $params['customfields']['sshKey'];

        $key = $key ? $key : $this->generateKey($params);

        if (!$key) {
            return false;
        }

        $key = $this->apiConnection->importKeyPair([
            'KeyName' => 'WHMCS_SERVICE_' . $params['serviceid'],
            'PublicKeyMaterial' => $key
        ]);

        return $key["KeyName"];
    }

    public function getAndDeleteTest($params)
    {
        $sshRepo = new \ModulesGarden\Servers\AwsEc2\App\Models\SSHKey\SSHKeysRepository();
        return $sshRepo->clearPrivateKey($params['serviceid']);
    }

    public function generateKey($params)
    {
        $sshRepo = new \ModulesGarden\Servers\AwsEc2\App\Models\SSHKey\SSHKeysRepository();
        $fromDB = $sshRepo->get($params['serviceid']);
        if ($fromDB)
            return $fromDB['public_key'];

        $keys = SSHKey::generateKey();
        $salt = uniqid();

        $sshRepo = new \ModulesGarden\Servers\AwsEc2\App\Models\SSHKey\SSHKeysRepository();

        $result = $sshRepo->add(
            $params['serviceid'],
            $keys['public'],
            $keys['private'],
            $salt
        );
        if ($result)
            return $keys['public'];
        return null;
    }


    public function isProperIpCount($count = null)
    {
        if ($count === '0' || $count === 0 || (int)$count > 0) {
            return true;
        }

        return false;
    }

    protected function addPrivateIpv6($instance, $whmcsParams = [])
    {
        $ipCount = ($this->isProperIpCount($whmcsParams['configoptions']['ipv6']) ?
            (int)$whmcsParams['configoptions']['ipv6'] : (int)$this->productSettings['ipv6']);
        if (!$instance['NetworkInterfaces'][0] || (int)$ipCount <= 0) {
            return;
        }

        $networkInterfaceId = $instance['NetworkInterfaces'][0]['NetworkInterfaceId'];

        $this->apiConnection->assignIpv6Addresses([
            'Ipv6AddressCount' => $ipCount,
            'NetworkInterfaceId' => $networkInterfaceId
        ]);
    }

    protected function loadApiConnection()
    {
        $this->apiConnection = new ClientWrapper($this->pid, $this->sid);
    }

    protected function loadProductConfig($params)
    {
        $this->pid = $params['pid'];
        $this->sid = $params['serviceid'];

        $this->params = $params;

        $productConfigRepo = new Repository();

        $this->productSettings = $productConfigRepo->getProductSettings($this->pid);
    }

    protected function prepareRequestParams($whmcsParams = [], $key)
    {
        $sshKey = [];

        if ($key) {
            $sshKey = [
                'KeyName' => $key,
            ];
        }

        $params = [
            'InstanceType' => $this->isParamValid($whmcsParams['configoptions']['instanceType']) ?
                $whmcsParams['configoptions']['instanceType'] : $this->productSettings['instanceType'],
            'TagSpecifications' => [
                [
                    'ResourceType' => 'instance',
                    'Tags' => $this->getTagsParams()
                ],
                [
                    'ResourceType' => 'volume',
                    'Tags' => $this->getTagsParams()
                ]
            ],
            'BlockDeviceMappings' =>
                [
                    $this->getBlockDeviceParams($whmcsParams)
                ],
            'HibernationOptions' => [
                'Configured' => $this->productSettings['hibernationOptions'] === 'on' ? true : false,
            ],
            'CapacityReservationSpecification' => [
                'CapacityReservationPreference' => ($this->productSettings['capacityReservationSpecification'] === 'on' ? 'open' : 'none')
            ],
            'ImageId' => $this->getImageIdForRegion($whmcsParams),
            'UserData' => $this->prepareUserData($whmcsParams),
            'MinCount' => 1,
            'MaxCount' => 1,

        ];
        if ($this->productSettings['subnet'] !== "default")
            $params['SubnetId'] = $this->productSettings['subnet'];


        $params = array_merge($params, $sshKey);

        if (is_array($this->productSettings['securityGroups']) && !empty($this->productSettings['securityGroups'])) {
            $params['SecurityGroupIds'] = $this->productSettings['securityGroups'];
        }

        return $params;
    }

    public function getBlockDeviceParams($whmcsParams = [])
    {
        if (isset($whmcsParams['configoptions']['ami']) && $whmcsParams['configoptions']['ami'] != $this->productSettings['ami']) {
            $ami = $whmcsParams['configoptions']['ami'];
        } else {
            $ami = $this->getImageIdForRegion($whmcsParams);
        }

        $result = $this->apiConnection->describeImages(['ImageIds' => [$ami]]);

        $params =
            [
                'DeviceName' => $result[0]['BlockDeviceMappings'][0]['DeviceName'],
                'Ebs' =>
                    [
                        'VolumeType' => $this->isParamValid($whmcsParams['configoptions']['volumeType']) ?
                            $whmcsParams['configoptions']['volumeType'] : $this->productSettings['volumeType']
                    ]
            ];

        if((isset($whmcsParams['configoptions']['volumeSize']) && $whmcsParams['configoptions']['volumeSize'] != 0) ||  $this->productSettings['volumeSize'] != 0)
        {
            $tempParams =
            [
                'VolumeSize' => $this->isNumericParamValid($whmcsParams['configoptions']['volumeSize']) ?
                        $whmcsParams['configoptions']['volumeSize'] : $this->productSettings['volumeSize']
            ];
            $params['Ebs'] = array_merge($params['Ebs'], $tempParams);
        }

        if((isset($whmcsParams['configoptions']['volumeType']) && $whmcsParams['configoptions']['volumeType'] === 'io1') || $this->productSettings['volumeType'] === 'io1')
        {
            $tempParams =
            [
                'Iops' => $this->productSettings['iops'],
                'SnapshotId' => $result[0]['BlockDeviceMappings'][0]['Ebs']['SnapshotId']
            ];
            $params['Ebs'] = array_merge($params['Ebs'], $tempParams);
        }
        return $params;
    }

    public function getTagsParams()
    {
        $tagBase = ($this->productSettings['tagName'] ? $this->productSettings['tagName'] : 'WHMCS');

        return [
            [
                'Key' => $tagBase,
                'Value' => $this->sid
            ],
            [
                'Key' => 'Name',
                'Value' => $this->params['domain']
            ]
        ];
    }

    public function isNumericParamValid($param)
    {
        return (is_numeric($param) && trim($param) !== '');
    }

    public function isParamValid($param)
    {
        return (is_string($param) && trim($param) !== '');
    }

    protected function getInstanceIds()
    {
        return [$this->params['customfields']['InstanceId']];
    }

    public function updateCustomField($fieldName = null, $fieldValue = null)
    {
        $prodModel = new ProductCustomFields($this->pid, $this->sid);

        $prodModel->updateFieldValue($fieldName, $fieldValue);
    }

    public function parseTags($tags = [])
    {
        if (!is_array($tags) || count($tags) === 0) {
            return '';
        }

        $tagsString = '';
        foreach ($tags as $tag) {
            $tagsString .= $tag['Key'] . ':' . $tag['Value'] . ',';
        }

        return trim($tagsString, ',');
    }

    protected function deleteKey($keyName = null)
    {
        if (is_string($keyName) && trim($keyName) !== '') {
            $key = $this->apiConnection->deleteKeyPair([
                'KeyName' => $keyName
            ]);

            return $key["KeyName"];
        }
    }

    private function prepareUserData($params)
    {
        $userData = UserData::read($params['configoptions']['userDataFile'] ?: $this->productSettings['userDataFile']);
        if($userData)
        {
            $userData = Smarty::get()->fetch($userData, $params) . "\n";
        }

        $configUserData = str_replace("\r\n", "\n", $this->productSettings['userData']);
        $configUserData = htmlspecialchars_decode($configUserData);
        $configUserData = Smarty::get()->fetch($configUserData, $params) . "\n";

        $userData .= $configUserData;
        return base64_encode($userData);
    }

    private function swapSecurityGroup(&$params, $securityGroupId)
    {
        if($securityGroupId) {
            unset($params['SecurityGroupIds']);
            $params['SecurityGroupIds'] = [$securityGroupId];
            $this->productSettings['securityGroups'] = [$securityGroupId];
        }
        return $params;
    }

    private function getImageIdForRegion($whmcsParams)
    {
        $repository = new \ModulesGarden\Servers\AwsEc2\App\Models\AvailableImages\Repository();
        $instanceId = $this->isParamValid($whmcsParams['configoptions']['ami']) ?
            $whmcsParams['configoptions']['ami'] : $this->productSettings['ami'];
        $imageDetails = $repository->getImageByNameAndRegion($instanceId, $this->productSettings['region'], $this->pid);

        if(!$imageDetails){
            return $instanceId;
        }
        return $imageDetails['image_id'];
    }

    protected function sendWelcomeEmail(int $serviceId, array $params, array $customVars = null)
    {
        $templateId = $this->productSettings['emailTemplate'];
        logActivity($templateId);
        if($templateId === 'off')
            return;

        unset($params['model']);
        array_merge($params, $params['customfields']);
        $params = array_merge($params, $params['customfields'], $params['configoptions'], $params['clientsdetails']);
        unset($params['customfields']);
        unset($params['configoptions']);
        unset($params['clientsdetails']);

        $customVars = $this->extractResponseArray($customVars);
        $emailSender = new EmailSender();
        $res = $emailSender->send($templateId, $serviceId, array_merge($customVars, $params));
    }

    protected function extractResponseArray($instanceDetails)
    {
        $result = [];
        foreach ($instanceDetails as $key => $detail) {
            if(is_array($detail) && !empty($detail))
            {
                $temp = $this->extractResponseArray($detail);
                foreach($temp as $name => $value)
                {
                    $result[$key . '_' . $name] = $value;
                }
            }
            else
            {
                $result[$key] = $detail;
            }
        }
        return $result;
    }
}
